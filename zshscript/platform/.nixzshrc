# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="risto"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

# User configuration

# export PATH="/opt/local/bin:/opt/local/sbinct:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin"
# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"


# Key binding
bindkey "^f" forward-word
bindkey "^b" backward-word

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias cp='rsync --progress -ravzI'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias dumpclipboard='xclip -selection clipboard -o'
# Windows cat /dev/clipboard
# Mac pbpaste
# SSH clipboard, e.g. alias sshclipboard='sshcopyclipboard zeng@192.168.0.10 idfile.pem'
sshcopyclipboard() {
    dumpclipboard /tmp/sshclipboard.txt
    scp -i "${2}" /tmp/sshclipboard.txt ${1}:/tmp/sshclipboard.txt
}

# Safer rm habits
# Usage: delete a single fileOrFolder at current folder, hope we will have more sophisticated solution later
delete() {
    #if this is a folder
    filepath=($@)
    echo "Finding all files to delete..."
    filesToDelete=$(ag --hidden -l -g "" -u ${filepath[@]})
    linesToDelete=$(echo $filesToDelete | wc -l)
    printf "${filesToDelete}\n"
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    echo "${RED}Do you really want to install this folder(${linesToDelete} files)?${NC}(y/n)"
    read yesno
    if [ "${yesno}" != "y" ]; then
        echo "You didn't delete the files..."
    else
        #Check if these folder are dangerous folder
        dangerousFolders=("$HOME" "~" "./\.\..*" "/usr.*") #TODO: regex
        danger=""
        for df in ${dangerousFolders[@]}; do
            #echo "--$df"
            if [[ ${filepath[@]} =~ ${df} ]]; then
                danger="true"
                break
            fi
        done
        if [ "$danger" != "true" ]; then
            rm -rf ${filepath} #echo "rm!"
        else
            echo "${RED}You are deleting files suspeciously dangerous!!!(Type: 'I INSIST' )${NC}"
            read insist
            [[ $insist == "I INSIST" ]] && rm -rf ${filepath} && echo "All removed!" && return
            echo "Nothing deleted."
        fi
    fi
}
# alias foo='set -f;foo';foo(){ command foo "$@";set +f;}
# alias delete='noglob delete'

# Home brew check and install
checkIfInstalled() {
    if ! type ${1}  > /dev/null 2>&1; then
        printf "${RED}${1} is installed.${NC}\n"
    else
        printf "${RED}${1} might not be installed correctly.${NC}\n"
    fi
}
checkAndBrew() {
    PATH="${PATH}:$HOME/.linuxbrew/bin:/usr/local/bin"
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    # Make sure this is fast than brew ls --versions ${1} > /dev/null; ?

    if ! type $1 > /dev/null 2>&1; then
        if ! type "brew"  > /dev/null 2>&1; then
            >&2 printf "${RED}Please install Home Brew first! Mac or Linux${NC}\n"
        else
            printf "${RED}Brew installing '${1}'${NC}\n"
                brew install $2
        fi
    else
        printf "${1} is ready.\n"
    fi
}

# Fzf and ag is my new love
checkAndBrew "$HOME/.fzf/bin/fzf" fzf
checkAndBrew "ag" the_silver_searcher

# Eclim, powerful yet require many setups, here we are only interested in headless mode
function eclimd {
${ECLIPSE_HOME}/eclimd -Dosgi.instance.area.default=$(pwd)/$1
}

# Machine dependent, path and install, eventually this might be disabled when everything is installed from brew
# source ~/.dotfiles/samples/macvar.def
# source ~/.dotfiles/samples/linuxvar.def

# Auto added by other installers...
