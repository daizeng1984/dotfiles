# Slack notifier
tellslack() {
    if [ -z "$SLACK_WEBHOOK_URL" ]; then
        echo -n "Please input your SLACK_WEBHOOK_URL="
        read __url
        export SLACK_WEBHOOK_URL="$__url"
    fi
    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${1}\"}" $SLACK_WEBHOOK_URL
}

# adb tools
adbshell() {
    # https://nixos.wiki/wiki/Android
    nix-shell -p androidenv.androidPkgs_9_0.platform-tools
}

# Deploy nix direnv
deploynix() {
    cp $DOTFILES_HOME/direnv/${1}/* .
    cp $DOTFILES_HOME/direnv/${1}/.envrc .
    direnv allow
}

# Deploy conda direnv
deployconda_update_env() {
  if (grep -q name: environment.yml); then
    conda env update -f environment.yml
  else
    (>&2 echo No environment.yml found);
  fi;
}

deploymeson() {
    deploynix cpp
    local meson_template="
project('myproject', 'cpp',
  version : '0.1',
  default_options : ['warning_level=3',
                     'cpp_std=c++17'])

cxx = meson.get_compiler('cpp')

boost_dep = cxx.find_library('boost_system')
poco_dep = cxx.find_library('PocoFoundation')

exe = executable('main', 'src/main.cpp',
  dependencies: [poco_dep, boost_dep],
  install : true)

test('basic', exe)
"    
    local main_cpp='
#include <boost/lexical_cast.hpp>
#include <Poco/Environment.h>
#include <iostream>

#if defined(__clang__)
#define CC "clang++"
#elif defined (__GNUC__)
#define CC "g++"
#else
#define CC "<unknown compiler>"
#endif

int main() {
  std::cout << "Hello World!" << std::endl
    << "Compiler: " << CC << " " << __VERSION__ << std::endl
    << "Boost: " << (BOOST_VERSION / 100000) << "."
                 << (BOOST_VERSION / 100 % 1000) << "."
                 << (BOOST_VERSION % 100) << std::endl
    << "POCO: " << (Poco::Environment::libraryVersion() >> 24) << "."
                << (Poco::Environment::libraryVersion() >> 16 & 0xff) << "."
                << (Poco::Environment::libraryVersion() >> 8 & 0xff)
                << std::endl;
}
'
    echo $meson_template > $(pwd)/meson.build
    mkdir -p $(pwd)/src/
    [ -f $(pwd)/src/main.cpp ] || echo $main_cpp > $(pwd)/src/main.cpp
    nvim $(pwd)/meson.build
}
mc() {
    meson compile -C build
}
deployconda() {
    if [ -n "$1" ]; then
        local env_name="$1";
        echo "use conda $env_name" > .envrc;
    else
        echo "use conda" > .envrc;
        env_content="name: new_env
channels:
    - conda-forge
dependencies:
    - python=3.6   # or 2.7
    - numpy
    - nodejs
    - flask
    - pip
    - pip:
        - Flask-Testing"
        echo $env_content > $(pwd)/environment.yml
        nvim $(pwd)/environment.yml
        conda env create -f $(pwd)/environment.yml
    fi;
    direnv allow
}

# show path
alias pythonpath='python -m site'
alias nodepath='npm config get prefix'

# SSH copy from https://stackoverflow.com/questions/1152362/how-to-send-data-to-local-clipboard-from-a-remote-ssh-session#answer-49890019
ssh_copy() {
    echo "Make sure you setup password free by doing: 1)ssh-keygen -o if not done 2) ssh-copy-id id@server"
    # TODO: alias pbcopy in linux xsel --clipboard
    if [ "$DOTFILES_SYSTEM_NAME" = "darwin" ]; then
        clipboard_function="pbcopy"
    else
        clipboard_function="xsel --clipboard"
    fi
    echo "Make sure you setup password free by doing: ssh-copy-id id@server"
    # clean all other ssh session
    ssh ${1} -t 'ps -aux | grep "[s]sh" | grep pts/ | grep -v $(ps --no-headers -fp $$ | awk "{print \$3}") | awk "{print \$2}" | xargs kill -9'
    while ! (nc -l 2000 | $clipboard_function) || true; do 
        : 
    done &

    copy_daemon=$!
    ssh ${1} -R 2000:localhost:2000 -t '([ -x $NIX_HOME_PATH/bin/tmux ] && ($NIX_HOME_PATH/bin/tmux -u a)) || ([ -x $MINICONDA_HOME/bin/tmux ] && ($MINICONDA_HOME/bin/tmux -u a) ) || $SHELL '
    pkill -9 -g $copy_daemon
}

ssh_tunnel() {
    ssh_tunnel_remote="${@:2}"
    ssh_tunnel_port="$1"
    ssh -L $ssh_tunnel_port:127.0.0.1:$ssh_tunnel_port -N -f $ssh_tunnel_remote
}

# discover ips
discover_network() {
    nmap 192.168.1.0/24
}

# stock
watch_stock() {
    tickrs -s ES=F,NQ=F,YM=F,AMZN,MSFT,AAPL,TSLA -t 3M --summary
}

# pdf compress
pdf_compress() {
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$1-compressed.pdf" "$1"
}

generate_gitignore() {
    curl "https://www.toptal.com/developers/gitignore/api/${1}" --output .gitignore
}

remote_copy() {
    rsync -rav -e ssh $@
}

